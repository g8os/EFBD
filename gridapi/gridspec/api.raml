#%RAML 1.0
title: G8OS Stateless GRID
version: v1.1.0-alpha
mediaType:  application/json

annotationTypes:
  AYSBased:
    type: nil
    allowedTargets: [Resource, Method]
    description: Mark the call as executed by AYS in the backend
  DirectAccess:
    type: nil
    allowedTargets: [Resource, Method]
    description: Mark the call as going directly to the G8OS node

types:
  !include types.raml


/nodes:
  get:
    (AYSBased):
    description: List Nodes
    displayName: ListNodes
    responses:
      200:
        body:
          application/json:
            type: Node[]
  /{nodeid}:
    get:
      (AYSBased):
      description: Get detailed information of a node
      displayName: GetNode
      responses:
        200:
          body:
            application/json:
              type: Node
    /jobs:
      description: Jobs for this Node
      get:
        (DirectAccess):
        displayName: ListNodeJobs
        description: List running jobs
        responses:
          200:
            body:
              application/json:
                type: JobListItem[]
      delete:
        (DirectAccess):
        displayName: KillAllNodeJobs
        description: Kills all running jobs
        responses:
          204:
            description: Jobs killed successfully
      /{jobid}:
        get:
          (DirectAccess):
          displayName: GetNodeJob
          description: Get the details of a submitted job
          responses:
            200:
              body:
                application/json:
                  type: JobResult
        delete:
          (DirectAccess):
          displayName: KillNodeJob
          description: Kills the job
          responses:
            204:
              description: Jobs killed successfully
    /ping:
      post:
        (DirectAccess):
        displayName: PingNode
        description: Ping this node
        responses:
          200:
            body:
              application/json:
                description: Returns true when the g8os responds
                type: boolean
    /state:
      get:
        (DirectAccess):
        displayName: GetNodeState
        description: The aggregated consumption of node + all processes (cpu, memory, etc...)
        responses:
          200:
            body:
              application/json:
                type:
                  CoreStateResult
    /reboot:
      post:
        (AYSBased):
        displayName: RebootNode
        description: Immediately reboot the machine.
        responses:
          204:
            description: Machine reboot signal sent successfully
    /cpus:
      get:
        (DirectAccess):
        displayName: GetCPUInfo
        description: Get detailed information of all CPUs in the node
        responses:
          200:
            body:
              application/json:
                type: CPUInfo[]
    /disks:
      get:
        (DirectAccess):
        displayName: GetDiskInfo
        description: Get detailed information of all the disks in the node
        responses:
          200:
            body:
              application/json:
                type: DiskInfo[]
    /mem:
      get:
        (DirectAccess):
        displayName: GetMemInfo
        description: Get detailed information about the memory in the node
        responses:
          200:
            body:
              application/json:
                type: MemInfo
    /nics:
      get:
        (DirectAccess):
        displayName: GetNicInfo
        description: Get detailed information about the network interfaces in the node
        responses:
          200:
            body:
              application/json:
                type: NicInfo[]
    /info:
      get:
        (DirectAccess):
        displayName: GetNodeOSInfo
        description: Get detailed information of the os of the node
        responses:
          200:
            body:
              application/json:
                type: OSInfo
    /processes:
       get:
         (DirectAccess):
         displayName: ListNodeProcesses
         description: Get Processes
         responses:
           200:
             body:
               application/json:
                 type: Process[]
       /{processid}:
         get:
           (DirectAccess):
           displayName: GetNodeProcess
           description: Get process details
           responses:
             200:
               body:
                 application/json:
                   type: Process
         delete:
           (DirectAccess):
           displayName: KillNodeProcess
           description: Kill Process
           responses:
             204:
               description: Job killed successfully
    /bridges:
      post:
        (AYSBased):
        displayName: CreateBridge
        description: Creates a new bridge
        body:
          application/json:
            type: BridgeCreate
        responses:
          201:
            description: Bridge created successfully
            headers:
              Location:
                description: Url to the created bridge resource
      get:
        (AYSBased):
        displayName: ListBridges
        description: List bridges
        responses:
          200:
            body:
              application/json:
                type: Bridge[]
      /{bridgeid}:
        get:
          (AYSBased):
          displayName: GetBridge
          description: Get bridge details
          responses:
            200:
              body:
                application/json:
                  type: Bridge
        delete:
          (AYSBased):
          displayName: DeleteBridge
          description: Remove bridge
          responses:
            204:
              description: Bridge removed successfully
    /storagepools:
      get:
        (AYSBased):
        displayName: ListStoragePools
        description: List storage pools present in the node
        responses:
          200:
            body:
              application/json:
                type: StoragePoolListItem[]
      post:
        (AYSBased):
        displayName: CreateStoragePool
        description: Create a new storage pool
        body:
          application/json:
            type: StoragePoolCreate
        responses:
          201:
            headers:
              Location:
                description: Url to the newly created storagepool.
      /{storagepoolname}:
        get:
          (AYSBased):
          displayName: GetStoragePoolInfo
          description: Get detailed information of this storage pool
          responses:
            200:
              body:
                application/json:
                  type: StoragePool
        delete:
          (AYSBased):
          displayName: DeleteStoragePool
          description: Delete the storage pool
          responses:
            204:
              description: Storage pool deleted successfully
        /devices:
          get:
            (AYSBased):
            displayName: ListStoragePoolDevices
            description: Lists the devices in the storage pool
            responses:
              200:
                body:
                  application/json:
                    description: List of devices of the storage pool
                    type: StoragePoolDevice[]
          post:
            (AYSBased):
            displayName: CreateStoragePoolDevices
            description: Add extra devices to this storage pool
            body:
              application/json:
                description: List of devices to add to the storage pool
                type: string[]
                example: ['/dev/sdc', '/dev/sdd']
            responses:
              204:
                description: Devices added successfully
          /{deviceuuid}:
            get:
              displayName: GetStoragePoolDeviceInfo
              description: Get information of the device
              responses:
                200:
                  body:
                    application/json:
                      type: StoragePoolDevice
            delete:
              (AYSBased):
              displayName: DeleteStoragePoolDevice
              description: Removes the device from the storagepool
              responses:
                204:
                  description: Removal started successfully
                  headers:
                    Location:
                      description: Url to the storage pool device resource beeing removed
        /filesystems:
          get:
            (AYSBased):
            displayName: ListFilesystems
            description: List filesystems
            responses:
              200:
                body:
                  application/json:
                    description: List of filesystems
                    type: string[]
          post:
            (AYSBased):
            displayName: CreateFilesystem
            description: Create a new filesystem
            body:
              application/json:
                type: FilesystemCreate
            responses:
              201:
                headers:
                  Location:
                    description: Url towards the newly created filesystem resource
          /{filesystemname}:
            get:
              (AYSBased):
              displayName: GetFilesystemInfo
              description: Get detailed filesystem information
              responses:
                200:
                  body:
                    application/json:
                      type: Filesystem
            delete:
              (AYSBased):
              displayName: DeleteFilesystem
              description: Delete filesystem
              responses:
                204:
                  description: Filesystem deleted successfully
            /snapshots:
              get:
                (AYSBased):
                displayName: ListFilesystemSnapshots
                description: List snapshots of this filesystem
                responses:
                  200:
                    body:
                      application/json:
                        description: List of snapshots
                        type: string[]
              post:
                (AYSBased):
                displayName: CreateSnapshot
                description: Create a new readonly filesystem of the current state of the vdisk
                body:
                  application/json:
                    description: |
                      Unique identifier for the snapshot
                      Permitted characters: a-z,-
                      Max length: 50 characters.
                    type: string
                responses:
                  201:
                    description: Snapshot created successfully
                    headers:
                      Location:
                        description: Url to the created snapshot resource
              /{snapshotname}:
                get:
                  (AYSBased):
                  displayName: GetFilesystemSnapshotInfo
                  description: Get detailed information on the snapshot
                  responses:
                    200:
                      body:
                        application/json:
                          type: Snapshot
                delete:
                  (AYSBased):
                  displayName: DeleteFilesystemSnapshot
                  description: Delete snapshot
                  responses:
                    204:
                      description: Snapshot deleted successfully
                /rollback:
                  post:
                    (AYSBased):
                    displayName: RollbackFilesystemSnapshot
                    description: Rollback the filesystem to the state at the moment the snapshot was taken
                    responses:
                      204:
                        description: Snapshot rollbacked successfully
    /zerotiers:
      get:
        (AYSBased):
        displayName: ListZerotier
        description: List running Zerotier networks
        responses:
          200:
            body:
              application/json:
                type: ZerotierListItem[]
      post:
        (AYSBased):
        displayName: JoinZerotier
        description: Join Zerotier network
        body:
          application/json:
            type: ZerotierJoin
        responses:
          201:
            description: Zerotier network joined successfully
            headers:
              Location:
                description: Url to the created zerotier network resource
      /{zerotierid}:
        get:
          (AYSBased):
          displayName: GetZerotier
          description: Get Zerotier network details
          responses:
            200:
              body:
                application/json:
                  type: Zerotier
        delete:
          (AYSBased):
          displayName: ExitZerotier
          description: Exit the Zerotier network
          responses:
            204:
              description: Zerotier network exited successfully
    /containers:
      get:
        (AYSBased):
        displayName: ListContainers
        description: List running Containers
        responses:
          200:
            body:
              application/json:
                type: ContainerListItem[]
      post:
        (AYSBased):
        displayName: CreateContainer
        description: Create a new Container
        body:
          application/json:
            type: CreateContainer
        responses:
          201:
            description: Container created successfully
            headers:
              Location:
                description: Url to the created container resource
      /{containerid}:
        delete:
          (AYSBased):
          displayName: DeleteContainer
          description: Delete Container instance
          responses:
            204:
              description: Container deleted successfully
        get:
          (AYSBased):
          displayName: GetContainer
          description: Get Container
          responses:
            200:
              body:
                application/json:
                  type: Container
        /start:
          post:
            (AYSBased):
            displayName: StartContainer
            description: Start Container instance
            responses:
              201:
                description: Container started successfully
        /stop:
          post:
            (AYSBased):
            displayName: StopContainer
            description: Stop Container instance
            responses:
              204:
                description: Container stopped successfully
        /filesystem:
          post:
            (DirectAccess):
            description: Upload file to container
            displayName: FileUpload
            queryString:
              properties:
                path: string
            body:
              multipart/form-data:
                properties:
                  file:
                    type: file
                    required: true
                    description: the file to upload
            responses:
              204:
                description: File uploaded successfully
          get:
            (DirectAccess):
            description: Download file from container
            displayName: FileDownload
            queryString:
              properties:
                path: string
            responses:
              200:
                body:
                  application/octet-stream:
          delete:
            (DirectAccess):
            description: Delete file from container
            displayName: FileDelete
            body:
              application/json:
                type: DeleteFile
            responses:
              204:
                description: File deleted successfully
        /jobs:
          get:
            (DirectAccess):
            displayName: ListContainerJobs
            description: List running jobs on the container
            responses:
              200:
                body:
                  application/json:
                    type: JobListItem[]
          delete:
            (DirectAccess):
            displayName: KillAllContainerJobs
            description: Kills all running jobs on the container
            responses:
              204:
                description: Jobs killed successfully
          /{jobid}:
            get:
              (DirectAccess):
              displayName: GetContainerJob
              description: Get details of a submitted job on the container
              responses:
                200:
                  body:
                    application/json:
                      type: JobResult
            post:
              (DirectAccess):
              displayName: SendSignalToJob
              description: Send signal to the job
              body:
                application/json:
                  type: ProcessSignal
            delete:
              (DirectAccess):
              displayName: KillContainerJob
              description: Kills the job
              responses:
                204:
                  description: Job killed successfully
        /ping:
          post:
            (DirectAccess):
            displayName: PingContainer
            description: Ping this container
            responses:
              200:
                body:
                  application/json:
                    type: boolean
        /state:
          get:
            (DirectAccess):
            displayName: GetContainerState
            description: The aggregated consumption of container + all processes (cpu, memory, etc...)
            responses:
              200:
                body:
                  application/json:
                    type:
                      CoreStateResult
        /info:
          get:
            (DirectAccess):
            displayName: GetContainerOSInfo
            description: Get detailed information of the container os
            responses:
              200:
                body:
                  application/json:
                    type: OSInfo
        /processes:
           get:
             (DirectAccess):
             displayName: ListContainerProcesses
             description: Get running processes in this container
             responses:
               200:
                 body:
                   application/json:
                     type: Process[]
           post:
             (DirectAccess):
             displayName: StartContainerProcess
             description: Start a new process in this container
             body:
               application/json:
                 type: CoreSystem
             responses:
               202:
                 headers:
                   Location:
                     description: Url to the job object handling this request
           /{processid}:
             get:
               (DirectAccess):
               displayName: GetContainerProcess
               description: Get process details
               responses:
                 200:
                   body:
                     application/json:
                       type: Process
             delete:
               (DirectAccess):
               displayName: KillContainerProcess
               description: Kill Process
               responses:
                 204:
                   description: Process killed successfully
             post:
               (DirectAccess):
               displayName: SendSignalToProcess
               description: Send signal to the process
               body:
                 application/json:
                   type: ProcessSignal
    /vms:
      get:
        (AYSBased):
        description: List VMs
        displayName: ListVMs
        responses:
          200:
            body:
              application/json:
                type: VMListItem[]
      post:
        (AYSBased):
        description: Creates the VM
        displayName: CreateVM
        body:
          application/json:
            type: VMCreate
        responses:
          201:
            description: VM created successfully
            headers:
              Location:
                description: Url to the created vm resource
      /{vmid}:
        delete:
          (AYSBased):
          displayName: DeleteVM
          description: Deletes the VM
          responses:
            204:
              description: VM stopped successfully
        get:
          (AYSBased):
          displayName: GetVM
          description: Get detailed virtual machine object
          responses:
            200:
              body:
                application/json:
                  type: VM
        put:
          displayName: UpdateVM
          description: updates the VM
          body:
            application/json:
              type: VMUpdate
          responses:
            204:
              description: VM updated successfully
        /info:
          get:
            (DirectAccess):
            displayName: GetVMInfo
            description: Get statistical information about the virtual machine.
            responses:
              200:
                body:
                  application/json:
                    type: VMInfo
        /start:
          post:
            (AYSBased):
            displayName: StartVM
            description: Starts the VM
            responses:
              204:
                description: VM Started successfully
        /stop:
          post:
            (AYSBased):
            displayName: StopVM
            description: Stops the VM
            responses:
              204:
                description: VM Stopped successfully
        /pause:
          post:
            (AYSBased):
            displayName: PauseVM
            description: Pauses the VM
            responses:
              204:
                description: VM Paused successfully
        /resume:
          post:
            (AYSBased):
            displayName: ResumeVM
            description: Resumes the VM
            responses:
              204:
                description: VM Resumed successfully
        /shutdown:
          post:
            (AYSBased):
            displayName: ShutdownVM
            description: Gracefully shutdown the VM
            responses:
              204:
                description: VM shutdown request passed successfully
        /migrate:
          post:
            (AYSBased):
            displayName: MigrateVM
            description: Migrate the VM to another host
            body:
              application/json:
                type: VMMigrate
            responses:
              204:
                description: VM migration request passed successfully
/storageclusters:
  description: Create and get information about a storage clusters
  post:
    (AYSBased):
    displayName: DeployNewCluster
    description: Deploy New Cluster
    body:
      application/json:
        type: ClusterCreate
    responses:
      201:
        description: Deployment started
        headers:
          Location:
            description: Url to newly created storage cluster resource
  get:
    (AYSBased):
    displayName: ListAllClusters
    description: List all running clusters
    responses:
      200:
        body:
          application/json:
            type: string[]
  /{label}:
    get:
      (AYSBased):
      displayName: GetClusterInfo
      description: Get full Information about specific cluster
      responses:
        200:
          body:
            application/json:
              type: Cluster
    delete:
      (AYSBased):
      displayName: KillCluster
      description: Kill cluster
      responses:
        204:
          description: Cluster destroyed
/vdisks:
  get:
    (AYSBased):
    displayName: ListVdisks
    description: List vdisks
    responses:
      200:
        body:
          application/json:
            type: VdiskListItem[]
  post:
    (AYSBased):
    displayName: CreateNewVdisk
    description: Create a new vdisk, can be a copy from an existing vdisk
    body:
      application/json:
        type: VdiskCreate
    responses:
      201:
        headers:
          Location:
            description: Url to the created vdisk resource
      404:
        description: The template vdisk or storagecluster do not exist
      409:
        description: A vdisk with this ID already exists
  /{vdiskid}:
    get:
      (AYSBased):
      displayName: GetVdiskInfo
      description: Get vdisk information
      responses:
        200:
          body:
            application/json:
              type: Vdisk
        404:
          description: The vdisk does not exist
    delete:
      (AYSBased):
      displayName: DeleteVdisk
      description: Delete Vdisk
      responses:
        204:
          description: Deleted
        404:
          description: The vdisk does not exist
    /resize:
      post:
        (AYSBased):
        displayName: ResizeVdisk
        description: Resize Vdisk
        body:
          application/json:
            type: VdiskResize
        responses:
          204:
            description: Vdisk Resized
    /rollback:
      post:
        (AYSBased):
        displayName: RollbackVdisk
        description: Rollback a vdisk to a previous state
        body:
          application/json:
            type: VdiskRollback
        responses:
          204:
            description: Rollback started successfully
