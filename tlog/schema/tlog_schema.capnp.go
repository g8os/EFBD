// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type HandshakeRequest struct{ capnp.Struct }

// HandshakeRequest_TypeID is the unique identifier for the type HandshakeRequest.
const HandshakeRequest_TypeID = 0xe0d4e6d68fa24ac0

func NewHandshakeRequest(s *capnp.Segment) (HandshakeRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return HandshakeRequest{st}, err
}

func NewRootHandshakeRequest(s *capnp.Segment) (HandshakeRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return HandshakeRequest{st}, err
}

func ReadRootHandshakeRequest(msg *capnp.Message) (HandshakeRequest, error) {
	root, err := msg.RootPtr()
	return HandshakeRequest{root.Struct()}, err
}

func (s HandshakeRequest) String() string {
	str, _ := text.Marshal(0xe0d4e6d68fa24ac0, s.Struct)
	return str
}

func (s HandshakeRequest) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HandshakeRequest) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HandshakeRequest) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HandshakeRequest) HasVdiskID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HandshakeRequest) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRequest) SetVdiskID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HandshakeRequest) FirstSequence() uint64 {
	return s.Struct.Uint64(8)
}

func (s HandshakeRequest) SetFirstSequence(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HandshakeRequest) ResetFirstSequence() bool {
	return s.Struct.Bit(32)
}

func (s HandshakeRequest) SetResetFirstSequence(v bool) {
	s.Struct.SetBit(32, v)
}

// HandshakeRequest_List is a list of HandshakeRequest.
type HandshakeRequest_List struct{ capnp.List }

// NewHandshakeRequest creates a new list of HandshakeRequest.
func NewHandshakeRequest_List(s *capnp.Segment, sz int32) (HandshakeRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return HandshakeRequest_List{l}, err
}

func (s HandshakeRequest_List) At(i int) HandshakeRequest { return HandshakeRequest{s.List.Struct(i)} }

func (s HandshakeRequest_List) Set(i int, v HandshakeRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

// HandshakeRequest_Promise is a wrapper for a HandshakeRequest promised by a client call.
type HandshakeRequest_Promise struct{ *capnp.Pipeline }

func (p HandshakeRequest_Promise) Struct() (HandshakeRequest, error) {
	s, err := p.Pipeline.Struct()
	return HandshakeRequest{s}, err
}

type HandshakeResponse struct{ capnp.Struct }

// HandshakeResponse_TypeID is the unique identifier for the type HandshakeResponse.
const HandshakeResponse_TypeID = 0xee959a7d96c96641

func NewHandshakeResponse(s *capnp.Segment) (HandshakeResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HandshakeResponse{st}, err
}

func NewRootHandshakeResponse(s *capnp.Segment) (HandshakeResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HandshakeResponse{st}, err
}

func ReadRootHandshakeResponse(msg *capnp.Message) (HandshakeResponse, error) {
	root, err := msg.RootPtr()
	return HandshakeResponse{root.Struct()}, err
}

func (s HandshakeResponse) String() string {
	str, _ := text.Marshal(0xee959a7d96c96641, s.Struct)
	return str
}

func (s HandshakeResponse) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HandshakeResponse) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HandshakeResponse) Status() int8 {
	return int8(s.Struct.Uint8(4))
}

func (s HandshakeResponse) SetStatus(v int8) {
	s.Struct.SetUint8(4, uint8(v))
}

// HandshakeResponse_List is a list of HandshakeResponse.
type HandshakeResponse_List struct{ capnp.List }

// NewHandshakeResponse creates a new list of HandshakeResponse.
func NewHandshakeResponse_List(s *capnp.Segment, sz int32) (HandshakeResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return HandshakeResponse_List{l}, err
}

func (s HandshakeResponse_List) At(i int) HandshakeResponse {
	return HandshakeResponse{s.List.Struct(i)}
}

func (s HandshakeResponse_List) Set(i int, v HandshakeResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

// HandshakeResponse_Promise is a wrapper for a HandshakeResponse promised by a client call.
type HandshakeResponse_Promise struct{ *capnp.Pipeline }

func (p HandshakeResponse_Promise) Struct() (HandshakeResponse, error) {
	s, err := p.Pipeline.Struct()
	return HandshakeResponse{s}, err
}

type TlogResponse struct{ capnp.Struct }

// TlogResponse_TypeID is the unique identifier for the type TlogResponse.
const TlogResponse_TypeID = 0x98d11ae1c78a24d9

func NewTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func NewRootTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func ReadRootTlogResponse(msg *capnp.Message) (TlogResponse, error) {
	root, err := msg.RootPtr()
	return TlogResponse{root.Struct()}, err
}

func (s TlogResponse) String() string {
	str, _ := text.Marshal(0x98d11ae1c78a24d9, s.Struct)
	return str
}

func (s TlogResponse) Status() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s TlogResponse) SetStatus(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s TlogResponse) Sequences() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s TlogResponse) HasSequences() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogResponse) SetSequences(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSequences sets the sequences field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s TlogResponse) NewSequences(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TlogResponse_List is a list of TlogResponse.
type TlogResponse_List struct{ capnp.List }

// NewTlogResponse creates a new list of TlogResponse.
func NewTlogResponse_List(s *capnp.Segment, sz int32) (TlogResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TlogResponse_List{l}, err
}

func (s TlogResponse_List) At(i int) TlogResponse { return TlogResponse{s.List.Struct(i)} }

func (s TlogResponse_List) Set(i int, v TlogResponse) error { return s.List.SetStruct(i, v.Struct) }

// TlogResponse_Promise is a wrapper for a TlogResponse promised by a client call.
type TlogResponse_Promise struct{ *capnp.Pipeline }

func (p TlogResponse_Promise) Struct() (TlogResponse, error) {
	s, err := p.Pipeline.Struct()
	return TlogResponse{s}, err
}

type TlogBlock struct{ capnp.Struct }

// TlogBlock_TypeID is the unique identifier for the type TlogBlock.
const TlogBlock_TypeID = 0x8cf178de3c82d431

func NewTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return TlogBlock{st}, err
}

func NewRootTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return TlogBlock{st}, err
}

func ReadRootTlogBlock(msg *capnp.Message) (TlogBlock, error) {
	root, err := msg.RootPtr()
	return TlogBlock{root.Struct()}, err
}

func (s TlogBlock) String() string {
	str, _ := text.Marshal(0x8cf178de3c82d431, s.Struct)
	return str
}

func (s TlogBlock) Sequence() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogBlock) SetSequence(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogBlock) Offset() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogBlock) SetOffset(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogBlock) Size() uint64 {
	return s.Struct.Uint64(16)
}

func (s TlogBlock) SetSize(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s TlogBlock) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TlogBlock) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TlogBlock) Timestamp() uint64 {
	return s.Struct.Uint64(24)
}

func (s TlogBlock) SetTimestamp(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s TlogBlock) Operation() uint8 {
	return s.Struct.Uint8(32)
}

func (s TlogBlock) SetOperation(v uint8) {
	s.Struct.SetUint8(32, v)
}

// TlogBlock_List is a list of TlogBlock.
type TlogBlock_List struct{ capnp.List }

// NewTlogBlock creates a new list of TlogBlock.
func NewTlogBlock_List(s *capnp.Segment, sz int32) (TlogBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return TlogBlock_List{l}, err
}

func (s TlogBlock_List) At(i int) TlogBlock { return TlogBlock{s.List.Struct(i)} }

func (s TlogBlock_List) Set(i int, v TlogBlock) error { return s.List.SetStruct(i, v.Struct) }

// TlogBlock_Promise is a wrapper for a TlogBlock promised by a client call.
type TlogBlock_Promise struct{ *capnp.Pipeline }

func (p TlogBlock_Promise) Struct() (TlogBlock, error) {
	s, err := p.Pipeline.Struct()
	return TlogBlock{s}, err
}

type TlogAggregation struct{ capnp.Struct }

// TlogAggregation_TypeID is the unique identifier for the type TlogAggregation.
const TlogAggregation_TypeID = 0xe46ab5b4b619e094

func NewTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func NewRootTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func ReadRootTlogAggregation(msg *capnp.Message) (TlogAggregation, error) {
	root, err := msg.RootPtr()
	return TlogAggregation{root.Struct()}, err
}

func (s TlogAggregation) String() string {
	str, _ := text.Marshal(0xe46ab5b4b619e094, s.Struct)
	return str
}

func (s TlogAggregation) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogAggregation) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogAggregation) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogAggregation) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogAggregation) Timestamp() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogAggregation) SetTimestamp(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogAggregation) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TlogAggregation) HasVdiskID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetVdiskID(v string) error {
	return s.Struct.SetText(1, v)
}

func (s TlogAggregation) Blocks() (TlogBlock_List, error) {
	p, err := s.Struct.Ptr(2)
	return TlogBlock_List{List: p.List()}, err
}

func (s TlogAggregation) HasBlocks() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetBlocks(v TlogBlock_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewBlocks sets the blocks field to a newly
// allocated TlogBlock_List, preferring placement in s's segment.
func (s TlogAggregation) NewBlocks(n int32) (TlogBlock_List, error) {
	l, err := NewTlogBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return TlogBlock_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s TlogAggregation) Prev() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s TlogAggregation) HasPrev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetPrev(v []byte) error {
	return s.Struct.SetData(3, v)
}

// TlogAggregation_List is a list of TlogAggregation.
type TlogAggregation_List struct{ capnp.List }

// NewTlogAggregation creates a new list of TlogAggregation.
func NewTlogAggregation_List(s *capnp.Segment, sz int32) (TlogAggregation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return TlogAggregation_List{l}, err
}

func (s TlogAggregation_List) At(i int) TlogAggregation { return TlogAggregation{s.List.Struct(i)} }

func (s TlogAggregation_List) Set(i int, v TlogAggregation) error {
	return s.List.SetStruct(i, v.Struct)
}

// TlogAggregation_Promise is a wrapper for a TlogAggregation promised by a client call.
type TlogAggregation_Promise struct{ *capnp.Pipeline }

func (p TlogAggregation_Promise) Struct() (TlogAggregation, error) {
	s, err := p.Pipeline.Struct()
	return TlogAggregation{s}, err
}

type Command struct{ capnp.Struct }

// Command_TypeID is the unique identifier for the type Command.
const Command_TypeID = 0xdbe14b5e7e7c6009

func NewCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Command{st}, err
}

func NewRootCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Command{st}, err
}

func ReadRootCommand(msg *capnp.Message) (Command, error) {
	root, err := msg.RootPtr()
	return Command{root.Struct()}, err
}

func (s Command) String() string {
	str, _ := text.Marshal(0xdbe14b5e7e7c6009, s.Struct)
	return str
}

func (s Command) Type() uint8 {
	return s.Struct.Uint8(0)
}

func (s Command) SetType(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Command) Sequence() uint64 {
	return s.Struct.Uint64(8)
}

func (s Command) SetSequence(v uint64) {
	s.Struct.SetUint64(8, v)
}

// Command_List is a list of Command.
type Command_List struct{ capnp.List }

// NewCommand creates a new list of Command.
func NewCommand_List(s *capnp.Segment, sz int32) (Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Command_List{l}, err
}

func (s Command_List) At(i int) Command { return Command{s.List.Struct(i)} }

func (s Command_List) Set(i int, v Command) error { return s.List.SetStruct(i, v.Struct) }

// Command_Promise is a wrapper for a Command promised by a client call.
type Command_Promise struct{ *capnp.Pipeline }

func (p Command_Promise) Struct() (Command, error) {
	s, err := p.Pipeline.Struct()
	return Command{s}, err
}

const schema_f4533cbae6e08506 = "x\xda\x8cTQ\x88\x1bU\x14\xbd\xe7\xdd\x99\xe9\xae\xb4" +
	"M\x87\xc9\x87[\x84\xf6\xa3\x1fmq\xb5U?\xb4T" +
	"\xd6]EjD\xe8K\x05AD;&/\xc9\x98d" +
	"fv\xde\xec\xae\x8aZ\x11\xfcP\x84\xfeTi\x0b\x85" +
	"V\xfa\xa1`A\xa1\x15\x11\x0b+Tt\xa1\x05\x85U" +
	"\x14AR\x90\xfa'\x08\xfe\x8f\xbc\xc9f\x12\x13Y\xfb" +
	"\x97ws\xde;\xf7\x9c{\xee\x1c\x98\x16\x8f\x88\x83\xf6" +
	"\x0a\x13\xc9\xbd\xb6\x93\x1d\\\x7f\xeb\xf0o/\xff\xf5\x1e" +
	"\xc9\x19\xd8\x99\xf3v\xef\xd6\x97\x87\x8f\xfdM\xb6\xd8B" +
	"t\xff\x05\xec\x84\xf7\x19\xcc\xcfK8\x09B\xf6\xcb\x9e" +
	"w\xbf\xbd\xb9\xf3\x87\xd3\x06\x8e\x11x\x8e\x99\xe7\xfb\xe0" +
	"I\xdeB\xe4=\xc5+\x84l\xfa\xf8ko<\xff\xe4" +
	"\xcd_\x0dZ\x0c\xd1\x96\x01_\xe5;\xe0\xdd\xc8\xc1k" +
	"9x\xb5\xf2\xe1\xc9\x9fn\xad\xf7\xc6\xc0\xfd\xa7\xf7Y" +
	"Ux\x0f\x9b\x8b\xdeC\xd6\x1f\x84\xecTo\xe6\xf3\xcb" +
	"W^\xfa}\x1c\x9d\xbf=cW\xe0\xcd\xda\xf9E\xfb" +
	"\x19\xd3\xf7|c\xed\x83\xd7\xcf\xbe\xff\xe7X\xdf9\xfa" +
	"\x1d\xe7Yx\xe7\x1c\xf3\xf6\x19g\x85f3]k\xa9" +
	"\xae\x7fo\xca\x9d\xa8\xf9B\xffpO\xcd\x8f\xc3\xf8\xd0" +
	"\xd3\x9d\xa8\xb9\xd0\x89\xb8\xd6>\x0a\xc8\xbb\xd8\"\xb2@" +
	"\xe4^\xa9\x10\xc9\xcb\x0c\xb9*\xe0\x02e\x98\xe2\xd5C" +
	"D\xf2\x0b\x86\xbc&\xe0\x0aQ\x86 r\xbf\xdeO$" +
	"\xbfb\xc8\xef\x04\xc0e0\x91\xfb\x8d\xa9\xad2\xe4u" +
	"\x01\xd7B\x19\x16\x91\xbbf\x8a\xd7\x18\xf2{\x01\xd7\xe6" +
	"2l\"\xf7F\x95H^g\xc8\x9f\x05\\gw\x19" +
	"\x0e\x91\xfb\xa3)\xae3dO \xd3jqI\x855" +
	"ED\x98&\x81i\xc2\\\xd4hh\x95\x0e\x8e%\x1d" +
	"\xbc\xaa\x8aC\xcb\xd7-l#\x81m\x84R\xddO\xfd" +
	"\xc1!K\x83\xae\xd2\xa9\xdf%\xc4\x03t\x16\xc5*\xf1" +
	"\xd3 \"\x84pH\xc0!\xfc\x8f[U\xa5w\xc5Q" +
	"\xa8\x951l\xaa0l\x9f\xf1f\x0fC\x1e\x10\x18\xf8" +
	"5kt\xdc\xcd\x90G\x04\xe6t\xea\xa7K\x1a\x82\x04" +
	"\x04\x8d\xc8\x82\xc6v\xc2QF\xde\xd3\xf6M\xf9\x1f\x8d" +
	"\xba]?\xac\x13\x8dq\xef\x1fr\x17\xc3\x9a\xadl\x90" +
	"?(PJ_\x89\xd5P\xdf\xa4\xa3\x05\xa75\xc1y" +
	"\xc4\x0f\xeb\xba\xe5\xb7U\xd5\\\xd3H\x0d\xf7\x8e\x82\xdb" +
	"_ \x92\xcf1dk\xa8[\x99\xdaq\x86\xec\x98\x9c" +
	"\xa0\x9f\x93 !\x92-\x86L\x05\\\xde\xdd\x0f\xca\xe2" +
	"Y\"\x992\xe4\x9b\x02'\x96U\xa2\x83(\xc4\x14\x09" +
	"L\x11N,\xd7\x03\xdd~\xe21l%\x81\xad\x84\xac" +
	"\x11$:=\xa6\x16iW\xde~\xd1{\xa2\xb4J\x1f" +
	"\x0f\x12\xe4\xff.\xa9\x90k\x0a \x01l*\xcc\x0cs" +
	"\xbe\xd9LT\xd3\x04 \xec\x9bzg!\xec\x8c1\xf5" +
	"\x14C\x9e\x1f\x0a;gj\xa7\x19\xf2\xe2\x88\xb0\x0bf" +
	"\xca\xe7\x19\xf2\x13#\x0c}a\x1f\x1b\x0b.2\xe4\xa7" +
	"f\x03D\x7f\x03.\x99\x8c|\xb4\xb1?\x83\x0d\x18\xdd" +
	"\x9fR\xe8w\xd5@\xef\xbfb\xfd_\xe1\x1d7h\xee" +
	"\xc5NTk\x17q\xda1\xfc\x14\x12L\xb1\x14'j" +
	"\xb9\xd8\x86\xdb\x9a\xb8\x8e\xa3\x90'\xa2\xbe0\x1a7k" +
	"#nF\xdb^\x86|`r\x92c\xd9\xff'\x00\x00" +
	"\xff\xffIQP\xcf"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x8cf178de3c82d431,
		0x98d11ae1c78a24d9,
		0xdbe14b5e7e7c6009,
		0xe0d4e6d68fa24ac0,
		0xe46ab5b4b619e094,
		0xee959a7d96c96641)
}
