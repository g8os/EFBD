// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type HandshakeRequest struct{ capnp.Struct }

// HandshakeRequest_TypeID is the unique identifier for the type HandshakeRequest.
const HandshakeRequest_TypeID = 0xe0d4e6d68fa24ac0

func NewHandshakeRequest(s *capnp.Segment) (HandshakeRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRequest{st}, err
}

func NewRootHandshakeRequest(s *capnp.Segment) (HandshakeRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRequest{st}, err
}

func ReadRootHandshakeRequest(msg *capnp.Message) (HandshakeRequest, error) {
	root, err := msg.RootPtr()
	return HandshakeRequest{root.Struct()}, err
}

func (s HandshakeRequest) String() string {
	str, _ := text.Marshal(0xe0d4e6d68fa24ac0, s.Struct)
	return str
}

func (s HandshakeRequest) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HandshakeRequest) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HandshakeRequest) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HandshakeRequest) HasVdiskID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HandshakeRequest) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRequest) SetVdiskID(v string) error {
	return s.Struct.SetText(0, v)
}

// HandshakeRequest_List is a list of HandshakeRequest.
type HandshakeRequest_List struct{ capnp.List }

// NewHandshakeRequest creates a new list of HandshakeRequest.
func NewHandshakeRequest_List(s *capnp.Segment, sz int32) (HandshakeRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HandshakeRequest_List{l}, err
}

func (s HandshakeRequest_List) At(i int) HandshakeRequest { return HandshakeRequest{s.List.Struct(i)} }

func (s HandshakeRequest_List) Set(i int, v HandshakeRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HandshakeRequest_List) String() string {
	str, _ := text.MarshalList(0xe0d4e6d68fa24ac0, s.List)
	return str
}

// HandshakeRequest_Promise is a wrapper for a HandshakeRequest promised by a client call.
type HandshakeRequest_Promise struct{ *capnp.Pipeline }

func (p HandshakeRequest_Promise) Struct() (HandshakeRequest, error) {
	s, err := p.Pipeline.Struct()
	return HandshakeRequest{s}, err
}

type HandshakeResponse struct{ capnp.Struct }

// HandshakeResponse_TypeID is the unique identifier for the type HandshakeResponse.
const HandshakeResponse_TypeID = 0xee959a7d96c96641

func NewHandshakeResponse(s *capnp.Segment) (HandshakeResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HandshakeResponse{st}, err
}

func NewRootHandshakeResponse(s *capnp.Segment) (HandshakeResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HandshakeResponse{st}, err
}

func ReadRootHandshakeResponse(msg *capnp.Message) (HandshakeResponse, error) {
	root, err := msg.RootPtr()
	return HandshakeResponse{root.Struct()}, err
}

func (s HandshakeResponse) String() string {
	str, _ := text.Marshal(0xee959a7d96c96641, s.Struct)
	return str
}

func (s HandshakeResponse) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HandshakeResponse) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HandshakeResponse) Status() int8 {
	return int8(s.Struct.Uint8(4))
}

func (s HandshakeResponse) SetStatus(v int8) {
	s.Struct.SetUint8(4, uint8(v))
}

func (s HandshakeResponse) LastFlushedSequence() uint64 {
	return s.Struct.Uint64(8)
}

func (s HandshakeResponse) SetLastFlushedSequence(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HandshakeResponse) WaitTlogReady() bool {
	return s.Struct.Bit(40)
}

func (s HandshakeResponse) SetWaitTlogReady(v bool) {
	s.Struct.SetBit(40, v)
}

// HandshakeResponse_List is a list of HandshakeResponse.
type HandshakeResponse_List struct{ capnp.List }

// NewHandshakeResponse creates a new list of HandshakeResponse.
func NewHandshakeResponse_List(s *capnp.Segment, sz int32) (HandshakeResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return HandshakeResponse_List{l}, err
}

func (s HandshakeResponse_List) At(i int) HandshakeResponse {
	return HandshakeResponse{s.List.Struct(i)}
}

func (s HandshakeResponse_List) Set(i int, v HandshakeResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HandshakeResponse_List) String() string {
	str, _ := text.MarshalList(0xee959a7d96c96641, s.List)
	return str
}

// HandshakeResponse_Promise is a wrapper for a HandshakeResponse promised by a client call.
type HandshakeResponse_Promise struct{ *capnp.Pipeline }

func (p HandshakeResponse_Promise) Struct() (HandshakeResponse, error) {
	s, err := p.Pipeline.Struct()
	return HandshakeResponse{s}, err
}

type TlogAggregation struct{ capnp.Struct }

// TlogAggregation_TypeID is the unique identifier for the type TlogAggregation.
const TlogAggregation_TypeID = 0xe46ab5b4b619e094

func NewTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return TlogAggregation{st}, err
}

func NewRootTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return TlogAggregation{st}, err
}

func ReadRootTlogAggregation(msg *capnp.Message) (TlogAggregation, error) {
	root, err := msg.RootPtr()
	return TlogAggregation{root.Struct()}, err
}

func (s TlogAggregation) String() string {
	str, _ := text.Marshal(0xe46ab5b4b619e094, s.Struct)
	return str
}

func (s TlogAggregation) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogAggregation) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogAggregation) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogAggregation) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogAggregation) Timestamp() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s TlogAggregation) SetTimestamp(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s TlogAggregation) Blocks() (TlogBlock_List, error) {
	p, err := s.Struct.Ptr(1)
	return TlogBlock_List{List: p.List()}, err
}

func (s TlogAggregation) HasBlocks() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetBlocks(v TlogBlock_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBlocks sets the blocks field to a newly
// allocated TlogBlock_List, preferring placement in s's segment.
func (s TlogAggregation) NewBlocks(n int32) (TlogBlock_List, error) {
	l, err := NewTlogBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return TlogBlock_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s TlogAggregation) Prev() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TlogAggregation) HasPrev() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetPrev(v []byte) error {
	return s.Struct.SetData(2, v)
}

// TlogAggregation_List is a list of TlogAggregation.
type TlogAggregation_List struct{ capnp.List }

// NewTlogAggregation creates a new list of TlogAggregation.
func NewTlogAggregation_List(s *capnp.Segment, sz int32) (TlogAggregation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return TlogAggregation_List{l}, err
}

func (s TlogAggregation_List) At(i int) TlogAggregation { return TlogAggregation{s.List.Struct(i)} }

func (s TlogAggregation_List) Set(i int, v TlogAggregation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TlogAggregation_List) String() string {
	str, _ := text.MarshalList(0xe46ab5b4b619e094, s.List)
	return str
}

// TlogAggregation_Promise is a wrapper for a TlogAggregation promised by a client call.
type TlogAggregation_Promise struct{ *capnp.Pipeline }

func (p TlogAggregation_Promise) Struct() (TlogAggregation, error) {
	s, err := p.Pipeline.Struct()
	return TlogAggregation{s}, err
}

type TlogClientMessage struct{ capnp.Struct }
type TlogClientMessage_Which uint16

const (
	TlogClientMessage_Which_block            TlogClientMessage_Which = 0
	TlogClientMessage_Which_forceFlushAtSeq  TlogClientMessage_Which = 1
	TlogClientMessage_Which_waitNBDSlaveSync TlogClientMessage_Which = 2
	TlogClientMessage_Which_disconnect       TlogClientMessage_Which = 3
)

func (w TlogClientMessage_Which) String() string {
	const s = "blockforceFlushAtSeqwaitNBDSlaveSyncdisconnect"
	switch w {
	case TlogClientMessage_Which_block:
		return s[0:5]
	case TlogClientMessage_Which_forceFlushAtSeq:
		return s[5:20]
	case TlogClientMessage_Which_waitNBDSlaveSync:
		return s[20:36]
	case TlogClientMessage_Which_disconnect:
		return s[36:46]

	}
	return "TlogClientMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TlogClientMessage_TypeID is the unique identifier for the type TlogClientMessage.
const TlogClientMessage_TypeID = 0xc8407b23fdf6d1a2

func NewTlogClientMessage(s *capnp.Segment) (TlogClientMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TlogClientMessage{st}, err
}

func NewRootTlogClientMessage(s *capnp.Segment) (TlogClientMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TlogClientMessage{st}, err
}

func ReadRootTlogClientMessage(msg *capnp.Message) (TlogClientMessage, error) {
	root, err := msg.RootPtr()
	return TlogClientMessage{root.Struct()}, err
}

func (s TlogClientMessage) String() string {
	str, _ := text.Marshal(0xc8407b23fdf6d1a2, s.Struct)
	return str
}

func (s TlogClientMessage) Which() TlogClientMessage_Which {
	return TlogClientMessage_Which(s.Struct.Uint16(0))
}
func (s TlogClientMessage) Block() (TlogBlock, error) {
	p, err := s.Struct.Ptr(0)
	return TlogBlock{Struct: p.Struct()}, err
}

func (s TlogClientMessage) HasBlock() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogClientMessage) SetBlock(v TlogBlock) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated TlogBlock struct, preferring placement in s's segment.
func (s TlogClientMessage) NewBlock() (TlogBlock, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewTlogBlock(s.Struct.Segment())
	if err != nil {
		return TlogBlock{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s TlogClientMessage) ForceFlushAtSeq() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogClientMessage) SetForceFlushAtSeq(v uint64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, v)
}

func (s TlogClientMessage) SetWaitNBDSlaveSync() {
	s.Struct.SetUint16(0, 2)

}

func (s TlogClientMessage) SetDisconnect() {
	s.Struct.SetUint16(0, 3)

}

// TlogClientMessage_List is a list of TlogClientMessage.
type TlogClientMessage_List struct{ capnp.List }

// NewTlogClientMessage creates a new list of TlogClientMessage.
func NewTlogClientMessage_List(s *capnp.Segment, sz int32) (TlogClientMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return TlogClientMessage_List{l}, err
}

func (s TlogClientMessage_List) At(i int) TlogClientMessage {
	return TlogClientMessage{s.List.Struct(i)}
}

func (s TlogClientMessage_List) Set(i int, v TlogClientMessage) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TlogClientMessage_List) String() string {
	str, _ := text.MarshalList(0xc8407b23fdf6d1a2, s.List)
	return str
}

// TlogClientMessage_Promise is a wrapper for a TlogClientMessage promised by a client call.
type TlogClientMessage_Promise struct{ *capnp.Pipeline }

func (p TlogClientMessage_Promise) Struct() (TlogClientMessage, error) {
	s, err := p.Pipeline.Struct()
	return TlogClientMessage{s}, err
}

func (p TlogClientMessage_Promise) Block() TlogBlock_Promise {
	return TlogBlock_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type TlogBlock struct{ capnp.Struct }

// TlogBlock_TypeID is the unique identifier for the type TlogBlock.
const TlogBlock_TypeID = 0x8cf178de3c82d431

func NewTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return TlogBlock{st}, err
}

func NewRootTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return TlogBlock{st}, err
}

func ReadRootTlogBlock(msg *capnp.Message) (TlogBlock, error) {
	root, err := msg.RootPtr()
	return TlogBlock{root.Struct()}, err
}

func (s TlogBlock) String() string {
	str, _ := text.Marshal(0x8cf178de3c82d431, s.Struct)
	return str
}

func (s TlogBlock) Sequence() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogBlock) SetSequence(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogBlock) Index() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s TlogBlock) SetIndex(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s TlogBlock) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TlogBlock) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TlogBlock) Timestamp() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s TlogBlock) SetTimestamp(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s TlogBlock) Operation() uint8 {
	return s.Struct.Uint8(24)
}

func (s TlogBlock) SetOperation(v uint8) {
	s.Struct.SetUint8(24, v)
}

// TlogBlock_List is a list of TlogBlock.
type TlogBlock_List struct{ capnp.List }

// NewTlogBlock creates a new list of TlogBlock.
func NewTlogBlock_List(s *capnp.Segment, sz int32) (TlogBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return TlogBlock_List{l}, err
}

func (s TlogBlock_List) At(i int) TlogBlock { return TlogBlock{s.List.Struct(i)} }

func (s TlogBlock_List) Set(i int, v TlogBlock) error { return s.List.SetStruct(i, v.Struct) }

func (s TlogBlock_List) String() string {
	str, _ := text.MarshalList(0x8cf178de3c82d431, s.List)
	return str
}

// TlogBlock_Promise is a wrapper for a TlogBlock promised by a client call.
type TlogBlock_Promise struct{ *capnp.Pipeline }

func (p TlogBlock_Promise) Struct() (TlogBlock, error) {
	s, err := p.Pipeline.Struct()
	return TlogBlock{s}, err
}

type TlogResponse struct{ capnp.Struct }

// TlogResponse_TypeID is the unique identifier for the type TlogResponse.
const TlogResponse_TypeID = 0x98d11ae1c78a24d9

func NewTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func NewRootTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func ReadRootTlogResponse(msg *capnp.Message) (TlogResponse, error) {
	root, err := msg.RootPtr()
	return TlogResponse{root.Struct()}, err
}

func (s TlogResponse) String() string {
	str, _ := text.Marshal(0x98d11ae1c78a24d9, s.Struct)
	return str
}

func (s TlogResponse) Status() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s TlogResponse) SetStatus(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s TlogResponse) Sequences() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s TlogResponse) HasSequences() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogResponse) SetSequences(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSequences sets the sequences field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s TlogResponse) NewSequences(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TlogResponse_List is a list of TlogResponse.
type TlogResponse_List struct{ capnp.List }

// NewTlogResponse creates a new list of TlogResponse.
func NewTlogResponse_List(s *capnp.Segment, sz int32) (TlogResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TlogResponse_List{l}, err
}

func (s TlogResponse_List) At(i int) TlogResponse { return TlogResponse{s.List.Struct(i)} }

func (s TlogResponse_List) Set(i int, v TlogResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s TlogResponse_List) String() string {
	str, _ := text.MarshalList(0x98d11ae1c78a24d9, s.List)
	return str
}

// TlogResponse_Promise is a wrapper for a TlogResponse promised by a client call.
type TlogResponse_Promise struct{ *capnp.Pipeline }

func (p TlogResponse_Promise) Struct() (TlogResponse, error) {
	s, err := p.Pipeline.Struct()
	return TlogResponse{s}, err
}

const schema_f4533cbae6e08506 = "x\xda\x8cS_\x88TU\x18\xff\xfd\xce\xb93\xbb\xc2" +
	"\xfe\xbb\xcc\x08*\xc4<d\xb0.Y\xea\xf6$\x82\xee" +
	"fb\x0b\x85g&\x08\x96\xa0nw\x8e3\xb7\xbds" +
	"\xef8\xe7\xce\xfe)\xc5\x14\x17L\x8a\x0a2,zh" +
	"\x17\x83\x02\x85\x02\x8d\xe8\xc9\xb7\xeaQ\x90\xa0\x97X!" +
	"\xf4-\x10\xaa\xa7\xec\xc6\x99\xd9\xf9\xe3\xb6\xa4o\xe7|" +
	"\xfc\xf8\xbe\xef\xf7\xe7\xdb3,\x0e\x89\xbd\x99\x05\x09\xa8" +
	"\xf1L6\xdd{\xeb\xec\x81_\x17\xef\xbd\x0b\xb5\x9dN" +
	"\x9a]^\xbb\xf3\xfd\x81\xd2\x1f\xc8\x88\x01`r\x85;" +
	"\x98\xfb\x86\xf6y\x95/\x13L\x7f\xd9y\xe1\x87\xdb;" +
	"n^\xb2p\xf6\xc1[\x98\x8c\xdc\xc7\xdcV9\x00\xe4" +
	"\\\xb9\x00\xa6\xab7\xff\xba\xff\xf8[\x87~\xb4h\xd1" +
	"C?\xc7\x01\x07\x98<#g\x99\xbb\xd8\x82\x7f(\xef" +
	"\x82\xe9\x8d\x99\xd5\xf7\x7f\xbeskm\xd3\xe6M\xa7\xc8" +
	"\xdc;\x8eE/;\xb6\xf9Gk\xdb\xbf\xbdv\xfd\x8d" +
	"\xdf64\xcf\xd8\x86\x93\xb7\x9d\x19\xe6\xfe\xb4\xe8\xc9{" +
	"N\xc1n>u\xfc\xa7\x8fO}z\xf1\xf7\x0d\xf0\x16" +
	"dkv\x96\xb9]Y\xdb\xfb\x89\xec]\xecN\x8d_" +
	"\xd55\xef\xe9D\x86q\xe5\xd5\xf6\xe7)\xdf\xabG\xf5" +
	"\xfd/\x85qe:\x8c\xa5?w\x8cT\xdb\xa4\x038" +
	"\x04\xdcOf\x00uIR]\x16t\xc9<mqe" +
	"\x1f\xa0>\x93T_\x0aR\xe4)\x00\xf7\x8b\x09@}" +
	".\xa9\xae\x08\xba\x92yJ\xc0\xfd\xca\x16/K\xaa\xaf" +
	"\x05]G\xe4\xe9\x00\xee\xd5\"\xa0\xaeH\xaa\xef\x04\xdd" +
	"\xcc\xb6<3\x80{\xdd\x16\xafI\xaa\x1b\x82\xa9\xd1'" +
	"\x9a:\xf25\x00n\x81\xe0\x16\xb0\x10De\xbd\xc8\x0c" +
	"\x043\xe0h\xd53U\x0eCp\x18\x1c-{\x89\xd7" +
	"\xf9\xa4IP\xd3&\xf1j`\xbd\x83N\xe3\xbanx" +
	"I\x10\x83\x11\xb3\x10\xcc\x82\x0f\x91\xa2\xa8M\xa1\x1eG" +
	"F[5\x06\xbbj\xec\xda\x0f\xa8\x9d\x92j\x8f`G" +
	"\x8c\xddv\xf3'%\xd5Q\xc1\x83&\xf1\x92\xa6\xa1\x80" +
	"\xa0@\x1f\x11\x1a\x8e\x80\xc7$[|F\xfa\xe6;\x9b" +
	"\xce\x7f6\x0ct\x94\xbc\xa0\x8d\xf1d\xa5\xb5\xc4\x98t" +
	"\x86\xd2\xb4\xb5\x85g\xe5\x7fERU\x05\x1f\xe3?\xe9" +
	"\xfa\"\xfa,\xa0\xca\x92\xaa.8,\xee\xa7m_j" +
	"\x17\x00U\x97T'\x05\x87\xe5\xdfi\xdb\x98\xa5Y@" +
	"-J\xaas\x82\x85\xd7\xc3\xd8\x9f\xe3X\xeff@\x8e" +
	"\x81\xe9\xf1\xb8\xe1\xeb#a\x93\xa6:\x95\x94\xf4\x89\xae" +
	"\x19\xe9\x82\x17$/N\x1f.1\xf4\xe6ui)\xf2" +
	"1\x90\x96\x03\xe3\xc7Q\xa4!\xfd\x04\xd9\xff\xe1w\xd4" +
	"\x8b\xca\xa6\xea\xcd\xe9\xa2U\xc70\xd9\xa0\xf1\xf4&\x1a" +
	"\xdb\xda\xb8\xa4zF\xf0\xf4\xbcn\x98 \x8e8\x08\xc1" +
	"A\xf0\xf4|90s\xcf\x1f\xe6\x10\x04\x87\x1e\xaa\xec" +
	"T\xa5\xd2\xd0\x15\x9b\x86\x08\xb0\x93\xf3\xdd\xc9\xa7&z" +
	"\xa2t&\x9f\xb1\xb5\x93\x92\xea\xbc\xa0+\xd8\xd6t\xd9" +
	"Z~NR}\xd0\x97\xf5\xf7l6\xce\xaf_J'" +
	"\xeb+\x13\xbdK\x19\x8d\xbc\x9a\xeel9j\x827u" +
	"W\xcfMB{\xb0\xe5J76\x0f\xba3\x02\x8e\xd6" +
	"\x1bz\xbe\x9b\xfaGR\xdb\xd4\xe3H\x9aN\x9a\xd6I" +
	"{\xd3\xbd0\xb9t\xd6\xa3d\xb9\xbc&\xa9\xc2>\xd6" +
	"\xc1*\xa0BI\xb5hY\x8f\xb7Y7\x1b\x80J$" +
	"\xd5\xdb\xffuf\xe35\x84\x9eI\x8e\x84M\xc3\xaa." +
	"\x97\xac\xf7\x03\x91\xaf\x1f\xc8\x945\x08\x85\xa2\xf6\xcaK" +
	"$\x04\x09\xfe\x1b\x00\x00\xff\xffn\x87k*"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x8cf178de3c82d431,
		0x98d11ae1c78a24d9,
		0xc8407b23fdf6d1a2,
		0xe0d4e6d68fa24ac0,
		0xe46ab5b4b619e094,
		0xee959a7d96c96641)
}
