// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ClientVerAck struct{ capnp.Struct }

// ClientVerAck_TypeID is the unique identifier for the type ClientVerAck.
const ClientVerAck_TypeID = 0x89f8da619fcbb3f3

func NewClientVerAck(s *capnp.Segment) (ClientVerAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ClientVerAck{st}, err
}

func NewRootClientVerAck(s *capnp.Segment) (ClientVerAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ClientVerAck{st}, err
}

func ReadRootClientVerAck(msg *capnp.Message) (ClientVerAck, error) {
	root, err := msg.RootPtr()
	return ClientVerAck{root.Struct()}, err
}

func (s ClientVerAck) String() string {
	str, _ := text.Marshal(0x89f8da619fcbb3f3, s.Struct)
	return str
}

func (s ClientVerAck) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s ClientVerAck) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ClientVerAck) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ClientVerAck) HasVdiskID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ClientVerAck) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ClientVerAck) SetVdiskID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ClientVerAck) FirstSequence() uint64 {
	return s.Struct.Uint64(8)
}

func (s ClientVerAck) SetFirstSequence(v uint64) {
	s.Struct.SetUint64(8, v)
}

// ClientVerAck_List is a list of ClientVerAck.
type ClientVerAck_List struct{ capnp.List }

// NewClientVerAck creates a new list of ClientVerAck.
func NewClientVerAck_List(s *capnp.Segment, sz int32) (ClientVerAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return ClientVerAck_List{l}, err
}

func (s ClientVerAck_List) At(i int) ClientVerAck { return ClientVerAck{s.List.Struct(i)} }

func (s ClientVerAck_List) Set(i int, v ClientVerAck) error { return s.List.SetStruct(i, v.Struct) }

// ClientVerAck_Promise is a wrapper for a ClientVerAck promised by a client call.
type ClientVerAck_Promise struct{ *capnp.Pipeline }

func (p ClientVerAck_Promise) Struct() (ClientVerAck, error) {
	s, err := p.Pipeline.Struct()
	return ClientVerAck{s}, err
}

type ServerVerAck struct{ capnp.Struct }

// ServerVerAck_TypeID is the unique identifier for the type ServerVerAck.
const ServerVerAck_TypeID = 0xb0f1edca577182a7

func NewServerVerAck(s *capnp.Segment) (ServerVerAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServerVerAck{st}, err
}

func NewRootServerVerAck(s *capnp.Segment) (ServerVerAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ServerVerAck{st}, err
}

func ReadRootServerVerAck(msg *capnp.Message) (ServerVerAck, error) {
	root, err := msg.RootPtr()
	return ServerVerAck{root.Struct()}, err
}

func (s ServerVerAck) String() string {
	str, _ := text.Marshal(0xb0f1edca577182a7, s.Struct)
	return str
}

func (s ServerVerAck) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s ServerVerAck) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ServerVerAck) Status() int8 {
	return int8(s.Struct.Uint8(4))
}

func (s ServerVerAck) SetStatus(v int8) {
	s.Struct.SetUint8(4, uint8(v))
}

// ServerVerAck_List is a list of ServerVerAck.
type ServerVerAck_List struct{ capnp.List }

// NewServerVerAck creates a new list of ServerVerAck.
func NewServerVerAck_List(s *capnp.Segment, sz int32) (ServerVerAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ServerVerAck_List{l}, err
}

func (s ServerVerAck_List) At(i int) ServerVerAck { return ServerVerAck{s.List.Struct(i)} }

func (s ServerVerAck_List) Set(i int, v ServerVerAck) error { return s.List.SetStruct(i, v.Struct) }

// ServerVerAck_Promise is a wrapper for a ServerVerAck promised by a client call.
type ServerVerAck_Promise struct{ *capnp.Pipeline }

func (p ServerVerAck_Promise) Struct() (ServerVerAck, error) {
	s, err := p.Pipeline.Struct()
	return ServerVerAck{s}, err
}

type TlogResponse struct{ capnp.Struct }

// TlogResponse_TypeID is the unique identifier for the type TlogResponse.
const TlogResponse_TypeID = 0x98d11ae1c78a24d9

func NewTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func NewRootTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func ReadRootTlogResponse(msg *capnp.Message) (TlogResponse, error) {
	root, err := msg.RootPtr()
	return TlogResponse{root.Struct()}, err
}

func (s TlogResponse) String() string {
	str, _ := text.Marshal(0x98d11ae1c78a24d9, s.Struct)
	return str
}

func (s TlogResponse) Status() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s TlogResponse) SetStatus(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s TlogResponse) Sequences() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s TlogResponse) HasSequences() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogResponse) SetSequences(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSequences sets the sequences field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s TlogResponse) NewSequences(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TlogResponse_List is a list of TlogResponse.
type TlogResponse_List struct{ capnp.List }

// NewTlogResponse creates a new list of TlogResponse.
func NewTlogResponse_List(s *capnp.Segment, sz int32) (TlogResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TlogResponse_List{l}, err
}

func (s TlogResponse_List) At(i int) TlogResponse { return TlogResponse{s.List.Struct(i)} }

func (s TlogResponse_List) Set(i int, v TlogResponse) error { return s.List.SetStruct(i, v.Struct) }

// TlogResponse_Promise is a wrapper for a TlogResponse promised by a client call.
type TlogResponse_Promise struct{ *capnp.Pipeline }

func (p TlogResponse_Promise) Struct() (TlogResponse, error) {
	s, err := p.Pipeline.Struct()
	return TlogResponse{s}, err
}

type TlogBlock struct{ capnp.Struct }

// TlogBlock_TypeID is the unique identifier for the type TlogBlock.
const TlogBlock_TypeID = 0x8cf178de3c82d431

func NewTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return TlogBlock{st}, err
}

func NewRootTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return TlogBlock{st}, err
}

func ReadRootTlogBlock(msg *capnp.Message) (TlogBlock, error) {
	root, err := msg.RootPtr()
	return TlogBlock{root.Struct()}, err
}

func (s TlogBlock) String() string {
	str, _ := text.Marshal(0x8cf178de3c82d431, s.Struct)
	return str
}

func (s TlogBlock) Sequence() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogBlock) SetSequence(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogBlock) Lba() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogBlock) SetLba(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogBlock) Size() uint64 {
	return s.Struct.Uint64(16)
}

func (s TlogBlock) SetSize(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s TlogBlock) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TlogBlock) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TlogBlock) Timestamp() uint64 {
	return s.Struct.Uint64(24)
}

func (s TlogBlock) SetTimestamp(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s TlogBlock) Operation() uint8 {
	return s.Struct.Uint8(32)
}

func (s TlogBlock) SetOperation(v uint8) {
	s.Struct.SetUint8(32, v)
}

// TlogBlock_List is a list of TlogBlock.
type TlogBlock_List struct{ capnp.List }

// NewTlogBlock creates a new list of TlogBlock.
func NewTlogBlock_List(s *capnp.Segment, sz int32) (TlogBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return TlogBlock_List{l}, err
}

func (s TlogBlock_List) At(i int) TlogBlock { return TlogBlock{s.List.Struct(i)} }

func (s TlogBlock_List) Set(i int, v TlogBlock) error { return s.List.SetStruct(i, v.Struct) }

// TlogBlock_Promise is a wrapper for a TlogBlock promised by a client call.
type TlogBlock_Promise struct{ *capnp.Pipeline }

func (p TlogBlock_Promise) Struct() (TlogBlock, error) {
	s, err := p.Pipeline.Struct()
	return TlogBlock{s}, err
}

type TlogAggregation struct{ capnp.Struct }

// TlogAggregation_TypeID is the unique identifier for the type TlogAggregation.
const TlogAggregation_TypeID = 0xe46ab5b4b619e094

func NewTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func NewRootTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func ReadRootTlogAggregation(msg *capnp.Message) (TlogAggregation, error) {
	root, err := msg.RootPtr()
	return TlogAggregation{root.Struct()}, err
}

func (s TlogAggregation) String() string {
	str, _ := text.Marshal(0xe46ab5b4b619e094, s.Struct)
	return str
}

func (s TlogAggregation) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogAggregation) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogAggregation) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogAggregation) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogAggregation) Timestamp() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogAggregation) SetTimestamp(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TlogAggregation) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TlogAggregation) HasVdiskID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetVdiskID(v string) error {
	return s.Struct.SetText(1, v)
}

func (s TlogAggregation) Blocks() (TlogBlock_List, error) {
	p, err := s.Struct.Ptr(2)
	return TlogBlock_List{List: p.List()}, err
}

func (s TlogAggregation) HasBlocks() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetBlocks(v TlogBlock_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewBlocks sets the blocks field to a newly
// allocated TlogBlock_List, preferring placement in s's segment.
func (s TlogAggregation) NewBlocks(n int32) (TlogBlock_List, error) {
	l, err := NewTlogBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return TlogBlock_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s TlogAggregation) Prev() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s TlogAggregation) HasPrev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetPrev(v []byte) error {
	return s.Struct.SetData(3, v)
}

// TlogAggregation_List is a list of TlogAggregation.
type TlogAggregation_List struct{ capnp.List }

// NewTlogAggregation creates a new list of TlogAggregation.
func NewTlogAggregation_List(s *capnp.Segment, sz int32) (TlogAggregation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return TlogAggregation_List{l}, err
}

func (s TlogAggregation_List) At(i int) TlogAggregation { return TlogAggregation{s.List.Struct(i)} }

func (s TlogAggregation_List) Set(i int, v TlogAggregation) error {
	return s.List.SetStruct(i, v.Struct)
}

// TlogAggregation_Promise is a wrapper for a TlogAggregation promised by a client call.
type TlogAggregation_Promise struct{ *capnp.Pipeline }

func (p TlogAggregation_Promise) Struct() (TlogAggregation, error) {
	s, err := p.Pipeline.Struct()
	return TlogAggregation{s}, err
}

const schema_f4533cbae6e08506 = "x\xda\x84TOHTk\x1c\xfd\x9d\xef\xbb3*\xa8" +
	"\xf3.3\x8b\xa7\xbc\xc7<\x1e.\x9e\x8f,\xb56\x89" +
	"\xe0\x9f\x14R\x0c\xfc4\xb2]\\\xc7\xafqr\xe6\xde" +
	"\xf1\xde\xeb\x14m$\xc1E\x11\xb4qa\x8bHA\xa8" +
	"\xa0\xc8H#\"\xc1@)K\xa1\xc0\xa0Z\x84A\xb4" +
	"k!\xb5hw\xe3\x9bq\xfe4\x8a\xed~\xf7p\xf8" +
	"~\xe7\x9c\xdf\x99\xa9_E+k\xf0\x859\x91\xa8\xf1" +
	"\xf9\xbdo\x0f_\xdd4>\xfc\xb8L\xa2\x0a\xcc\xf3O" +
	"n}y\xd2\xdc\xff\x9d|(!:<\x86F\x04'" +
	"\xd5\x18\xbc\x84\xfb\x04\xafas\xa2\xf9\xe3\x85\xed\xab\x8a" +
	"\xed+`3\xc5\xfe\x9bU#X\x97\x1ek\xd95\x10" +
	"\xbc\xf75W\x9e\x7f\xaa~3\xad\xe8(~|\x897" +
	"\"\xb8\xc1\xd5\xe3k\xfc<\xc1\xbb51:\xf0\xf2\xeb" +
	"\xf6|\x11[S\xe4\xa3Z#\x82]j\x0cvj\x8a" +
	"<\xb5U\xf5ha\xf1\xdc\xe7b\xddi\xf6\xac\xd6\x8d" +
	"\xe0bz|\xa0\x0d\x80\xea<'2,\x13\xc6!\x97" +
	"\xc7\xad\xe8\x99\xcc\xc7\xc1\x88\x914\x93M\xc7\xe21i" +
	"\xba\xa7\xc2\xd2n\x8b\x8c\xf4\x02\xa2\x9ckD\x1a\x88\xf4" +
	"\xcev\"\xd1\xca!z\x18\x80\x10\x14\xd6\xa5\xb0\x0e\x0e" +
	"\xd1\xcb\xa03\x84\xc0\x88\xf4\x136\x91\xe8\xe1\x10\xa7\x19" +
	"\xc6S\xd2vb\x96\x89Rb(%\x8c\xa7\x86b\xce" +
	"HW\x07\xca\x89\xa1\x9c\xe0\x9d\x8d\xd9\x8e\xdb/G)" +
	"<&\xcd\x88D\x191\x94\x11\xf6\x91x2nE\xdb" +
	"\xe3\x16\xcf\xe8\xfb+\xa7o\xb1\x9bH,p\x88e\x06" +
	"=+p\xe9_\"\xf1\x98C\xac(\x81,#\xf0\xd9" +
	"\xffD\xe2)\x87x\xc1\x00\x1e\x02'\xd2W\x15\xb6\xcc" +
	"!\xd6\x19t\x0d!hD\xfa\x9a\x02W8\xc4k\x06" +
	"\xdd\xc7C\xf0\x11\xe9\x1b}Db\x9dC\xbcc\xd0\xfd" +
	"\xff\x84\xe0'\xd2\xdf*p\x93Cl1x\x8e\x1cM" +
	"\x9b!\xa2\xac\x9f\x92\xf8\xa0\x91\x9d\x03N\xecb\xceh" +
	"`\xd8p\x86QA\x0c\x15\x84\xc0\x90\xe1\x1a\xd9\x0f\xcf" +
	"\x8d%\xa4\xe3\x1a\x09B2\x17\x8b\x95\x94\xb6\xe1\xc6," +
	"\x82\x09?1\xf8\x7f\x1bU\x9ft\xc2I\xcbt\xa4J" +
	"\xab4\x97Vm\x93\xaa<\x87\xa8\xcf_\xb3N\x998" +
	"\xc0!\x8e3\xb48\xae\xe1\x8e9`\xc4\xc0\xa8\xc0\x13" +
	"\x1cT\x12z9\xd2\x9a*\xf7\xdd\xdf/\xed\x94\xb4\x0b" +
	"\xdaT\xb0\xbf=\xbf_\x87\xb6#@\x89\xfa\x8fC\x1c" +
	"\xd9\xdd\x9c]\x82v\xb6j{\xban\x8bFm\x19U" +
	"I\x99Dj\xf3\x9f\xb9\xcd\xd7\xd5Q\xa78\xc4L\xde" +
	"\xf9\x0d\x85Ms\x88\xb9\x82\x1e\xcf\xaa8f8\xc4]" +
	"\x06\x9d#\xd3\x93;J\xf7\x1c\x87\x98W=a\x99\x9e" +
	"\xdcS\xbao\xef\xb4,\xdb\x93\xc2\x96\x05L#!\xb3" +
	"\x9d\xff\xe5\xfe{]\xb9\xf8G\xd22\x18\xb7\"#\xb9" +
	"\xdc\xff\xc8\xff\xf1\x10\x14\x18H\xda2\x95\xad\xcd\xcf\x00" +
	"\x00\x00\xff\xff/\xe4\x1b_"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x89f8da619fcbb3f3,
		0x8cf178de3c82d431,
		0x98d11ae1c78a24d9,
		0xb0f1edca577182a7,
		0xe46ab5b4b619e094)
}
