// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type HandshakeRequest struct{ capnp.Struct }

// HandshakeRequest_TypeID is the unique identifier for the type HandshakeRequest.
const HandshakeRequest_TypeID = 0xe0d4e6d68fa24ac0

func NewHandshakeRequest(s *capnp.Segment) (HandshakeRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return HandshakeRequest{st}, err
}

func NewRootHandshakeRequest(s *capnp.Segment) (HandshakeRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return HandshakeRequest{st}, err
}

func ReadRootHandshakeRequest(msg *capnp.Message) (HandshakeRequest, error) {
	root, err := msg.RootPtr()
	return HandshakeRequest{root.Struct()}, err
}

func (s HandshakeRequest) String() string {
	str, _ := text.Marshal(0xe0d4e6d68fa24ac0, s.Struct)
	return str
}

func (s HandshakeRequest) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HandshakeRequest) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HandshakeRequest) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HandshakeRequest) HasVdiskID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HandshakeRequest) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRequest) SetVdiskID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HandshakeRequest) FirstSequence() uint64 {
	return s.Struct.Uint64(8)
}

func (s HandshakeRequest) SetFirstSequence(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HandshakeRequest) ResetFirstSequence() bool {
	return s.Struct.Bit(32)
}

func (s HandshakeRequest) SetResetFirstSequence(v bool) {
	s.Struct.SetBit(32, v)
}

// HandshakeRequest_List is a list of HandshakeRequest.
type HandshakeRequest_List struct{ capnp.List }

// NewHandshakeRequest creates a new list of HandshakeRequest.
func NewHandshakeRequest_List(s *capnp.Segment, sz int32) (HandshakeRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return HandshakeRequest_List{l}, err
}

func (s HandshakeRequest_List) At(i int) HandshakeRequest { return HandshakeRequest{s.List.Struct(i)} }

func (s HandshakeRequest_List) Set(i int, v HandshakeRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HandshakeRequest_List) String() string {
	str, _ := text.MarshalList(0xe0d4e6d68fa24ac0, s.List)
	return str
}

// HandshakeRequest_Promise is a wrapper for a HandshakeRequest promised by a client call.
type HandshakeRequest_Promise struct{ *capnp.Pipeline }

func (p HandshakeRequest_Promise) Struct() (HandshakeRequest, error) {
	s, err := p.Pipeline.Struct()
	return HandshakeRequest{s}, err
}

type HandshakeResponse struct{ capnp.Struct }

// HandshakeResponse_TypeID is the unique identifier for the type HandshakeResponse.
const HandshakeResponse_TypeID = 0xee959a7d96c96641

func NewHandshakeResponse(s *capnp.Segment) (HandshakeResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HandshakeResponse{st}, err
}

func NewRootHandshakeResponse(s *capnp.Segment) (HandshakeResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HandshakeResponse{st}, err
}

func ReadRootHandshakeResponse(msg *capnp.Message) (HandshakeResponse, error) {
	root, err := msg.RootPtr()
	return HandshakeResponse{root.Struct()}, err
}

func (s HandshakeResponse) String() string {
	str, _ := text.Marshal(0xee959a7d96c96641, s.Struct)
	return str
}

func (s HandshakeResponse) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HandshakeResponse) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HandshakeResponse) Status() int8 {
	return int8(s.Struct.Uint8(4))
}

func (s HandshakeResponse) SetStatus(v int8) {
	s.Struct.SetUint8(4, uint8(v))
}

// HandshakeResponse_List is a list of HandshakeResponse.
type HandshakeResponse_List struct{ capnp.List }

// NewHandshakeResponse creates a new list of HandshakeResponse.
func NewHandshakeResponse_List(s *capnp.Segment, sz int32) (HandshakeResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return HandshakeResponse_List{l}, err
}

func (s HandshakeResponse_List) At(i int) HandshakeResponse {
	return HandshakeResponse{s.List.Struct(i)}
}

func (s HandshakeResponse_List) Set(i int, v HandshakeResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HandshakeResponse_List) String() string {
	str, _ := text.MarshalList(0xee959a7d96c96641, s.List)
	return str
}

// HandshakeResponse_Promise is a wrapper for a HandshakeResponse promised by a client call.
type HandshakeResponse_Promise struct{ *capnp.Pipeline }

func (p HandshakeResponse_Promise) Struct() (HandshakeResponse, error) {
	s, err := p.Pipeline.Struct()
	return HandshakeResponse{s}, err
}

type TlogAggregation struct{ capnp.Struct }

// TlogAggregation_TypeID is the unique identifier for the type TlogAggregation.
const TlogAggregation_TypeID = 0xe46ab5b4b619e094

func NewTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func NewRootTlogAggregation(s *capnp.Segment) (TlogAggregation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return TlogAggregation{st}, err
}

func ReadRootTlogAggregation(msg *capnp.Message) (TlogAggregation, error) {
	root, err := msg.RootPtr()
	return TlogAggregation{root.Struct()}, err
}

func (s TlogAggregation) String() string {
	str, _ := text.Marshal(0xe46ab5b4b619e094, s.Struct)
	return str
}

func (s TlogAggregation) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TlogAggregation) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TlogAggregation) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogAggregation) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogAggregation) Timestamp() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s TlogAggregation) SetTimestamp(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s TlogAggregation) VdiskID() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TlogAggregation) HasVdiskID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) VdiskIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TlogAggregation) SetVdiskID(v string) error {
	return s.Struct.SetText(1, v)
}

func (s TlogAggregation) Blocks() (TlogBlock_List, error) {
	p, err := s.Struct.Ptr(2)
	return TlogBlock_List{List: p.List()}, err
}

func (s TlogAggregation) HasBlocks() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetBlocks(v TlogBlock_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewBlocks sets the blocks field to a newly
// allocated TlogBlock_List, preferring placement in s's segment.
func (s TlogAggregation) NewBlocks(n int32) (TlogBlock_List, error) {
	l, err := NewTlogBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return TlogBlock_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s TlogAggregation) Prev() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s TlogAggregation) HasPrev() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s TlogAggregation) SetPrev(v []byte) error {
	return s.Struct.SetData(3, v)
}

// TlogAggregation_List is a list of TlogAggregation.
type TlogAggregation_List struct{ capnp.List }

// NewTlogAggregation creates a new list of TlogAggregation.
func NewTlogAggregation_List(s *capnp.Segment, sz int32) (TlogAggregation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return TlogAggregation_List{l}, err
}

func (s TlogAggregation_List) At(i int) TlogAggregation { return TlogAggregation{s.List.Struct(i)} }

func (s TlogAggregation_List) Set(i int, v TlogAggregation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TlogAggregation_List) String() string {
	str, _ := text.MarshalList(0xe46ab5b4b619e094, s.List)
	return str
}

// TlogAggregation_Promise is a wrapper for a TlogAggregation promised by a client call.
type TlogAggregation_Promise struct{ *capnp.Pipeline }

func (p TlogAggregation_Promise) Struct() (TlogAggregation, error) {
	s, err := p.Pipeline.Struct()
	return TlogAggregation{s}, err
}

type TlogClientMessage struct{ capnp.Struct }
type TlogClientMessage_Which uint16

const (
	TlogClientMessage_Which_block            TlogClientMessage_Which = 0
	TlogClientMessage_Which_forceFlushAtSeq  TlogClientMessage_Which = 1
	TlogClientMessage_Which_waitNBDSlaveSync TlogClientMessage_Which = 2
	TlogClientMessage_Which_disconnect       TlogClientMessage_Which = 3
)

func (w TlogClientMessage_Which) String() string {
	const s = "blockforceFlushAtSeqwaitNBDSlaveSyncdisconnect"
	switch w {
	case TlogClientMessage_Which_block:
		return s[0:5]
	case TlogClientMessage_Which_forceFlushAtSeq:
		return s[5:20]
	case TlogClientMessage_Which_waitNBDSlaveSync:
		return s[20:36]
	case TlogClientMessage_Which_disconnect:
		return s[36:46]

	}
	return "TlogClientMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TlogClientMessage_TypeID is the unique identifier for the type TlogClientMessage.
const TlogClientMessage_TypeID = 0xc8407b23fdf6d1a2

func NewTlogClientMessage(s *capnp.Segment) (TlogClientMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TlogClientMessage{st}, err
}

func NewRootTlogClientMessage(s *capnp.Segment) (TlogClientMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TlogClientMessage{st}, err
}

func ReadRootTlogClientMessage(msg *capnp.Message) (TlogClientMessage, error) {
	root, err := msg.RootPtr()
	return TlogClientMessage{root.Struct()}, err
}

func (s TlogClientMessage) String() string {
	str, _ := text.Marshal(0xc8407b23fdf6d1a2, s.Struct)
	return str
}

func (s TlogClientMessage) Which() TlogClientMessage_Which {
	return TlogClientMessage_Which(s.Struct.Uint16(0))
}
func (s TlogClientMessage) Block() (TlogBlock, error) {
	p, err := s.Struct.Ptr(0)
	return TlogBlock{Struct: p.Struct()}, err
}

func (s TlogClientMessage) HasBlock() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogClientMessage) SetBlock(v TlogBlock) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated TlogBlock struct, preferring placement in s's segment.
func (s TlogClientMessage) NewBlock() (TlogBlock, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewTlogBlock(s.Struct.Segment())
	if err != nil {
		return TlogBlock{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s TlogClientMessage) ForceFlushAtSeq() uint64 {
	return s.Struct.Uint64(8)
}

func (s TlogClientMessage) SetForceFlushAtSeq(v uint64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, v)
}

func (s TlogClientMessage) SetWaitNBDSlaveSync() {
	s.Struct.SetUint16(0, 2)

}

func (s TlogClientMessage) SetDisconnect() {
	s.Struct.SetUint16(0, 3)

}

// TlogClientMessage_List is a list of TlogClientMessage.
type TlogClientMessage_List struct{ capnp.List }

// NewTlogClientMessage creates a new list of TlogClientMessage.
func NewTlogClientMessage_List(s *capnp.Segment, sz int32) (TlogClientMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return TlogClientMessage_List{l}, err
}

func (s TlogClientMessage_List) At(i int) TlogClientMessage {
	return TlogClientMessage{s.List.Struct(i)}
}

func (s TlogClientMessage_List) Set(i int, v TlogClientMessage) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TlogClientMessage_List) String() string {
	str, _ := text.MarshalList(0xc8407b23fdf6d1a2, s.List)
	return str
}

// TlogClientMessage_Promise is a wrapper for a TlogClientMessage promised by a client call.
type TlogClientMessage_Promise struct{ *capnp.Pipeline }

func (p TlogClientMessage_Promise) Struct() (TlogClientMessage, error) {
	s, err := p.Pipeline.Struct()
	return TlogClientMessage{s}, err
}

func (p TlogClientMessage_Promise) Block() TlogBlock_Promise {
	return TlogBlock_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type TlogBlock struct{ capnp.Struct }

// TlogBlock_TypeID is the unique identifier for the type TlogBlock.
const TlogBlock_TypeID = 0x8cf178de3c82d431

func NewTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return TlogBlock{st}, err
}

func NewRootTlogBlock(s *capnp.Segment) (TlogBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return TlogBlock{st}, err
}

func ReadRootTlogBlock(msg *capnp.Message) (TlogBlock, error) {
	root, err := msg.RootPtr()
	return TlogBlock{root.Struct()}, err
}

func (s TlogBlock) String() string {
	str, _ := text.Marshal(0x8cf178de3c82d431, s.Struct)
	return str
}

func (s TlogBlock) Sequence() uint64 {
	return s.Struct.Uint64(0)
}

func (s TlogBlock) SetSequence(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TlogBlock) Index() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s TlogBlock) SetIndex(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s TlogBlock) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TlogBlock) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TlogBlock) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TlogBlock) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TlogBlock) Timestamp() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s TlogBlock) SetTimestamp(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s TlogBlock) Operation() uint8 {
	return s.Struct.Uint8(24)
}

func (s TlogBlock) SetOperation(v uint8) {
	s.Struct.SetUint8(24, v)
}

// TlogBlock_List is a list of TlogBlock.
type TlogBlock_List struct{ capnp.List }

// NewTlogBlock creates a new list of TlogBlock.
func NewTlogBlock_List(s *capnp.Segment, sz int32) (TlogBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return TlogBlock_List{l}, err
}

func (s TlogBlock_List) At(i int) TlogBlock { return TlogBlock{s.List.Struct(i)} }

func (s TlogBlock_List) Set(i int, v TlogBlock) error { return s.List.SetStruct(i, v.Struct) }

func (s TlogBlock_List) String() string {
	str, _ := text.MarshalList(0x8cf178de3c82d431, s.List)
	return str
}

// TlogBlock_Promise is a wrapper for a TlogBlock promised by a client call.
type TlogBlock_Promise struct{ *capnp.Pipeline }

func (p TlogBlock_Promise) Struct() (TlogBlock, error) {
	s, err := p.Pipeline.Struct()
	return TlogBlock{s}, err
}

type TlogResponse struct{ capnp.Struct }

// TlogResponse_TypeID is the unique identifier for the type TlogResponse.
const TlogResponse_TypeID = 0x98d11ae1c78a24d9

func NewTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func NewRootTlogResponse(s *capnp.Segment) (TlogResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TlogResponse{st}, err
}

func ReadRootTlogResponse(msg *capnp.Message) (TlogResponse, error) {
	root, err := msg.RootPtr()
	return TlogResponse{root.Struct()}, err
}

func (s TlogResponse) String() string {
	str, _ := text.Marshal(0x98d11ae1c78a24d9, s.Struct)
	return str
}

func (s TlogResponse) Status() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s TlogResponse) SetStatus(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s TlogResponse) Sequences() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s TlogResponse) HasSequences() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TlogResponse) SetSequences(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSequences sets the sequences field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s TlogResponse) NewSequences(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TlogResponse_List is a list of TlogResponse.
type TlogResponse_List struct{ capnp.List }

// NewTlogResponse creates a new list of TlogResponse.
func NewTlogResponse_List(s *capnp.Segment, sz int32) (TlogResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TlogResponse_List{l}, err
}

func (s TlogResponse_List) At(i int) TlogResponse { return TlogResponse{s.List.Struct(i)} }

func (s TlogResponse_List) Set(i int, v TlogResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s TlogResponse_List) String() string {
	str, _ := text.MarshalList(0x98d11ae1c78a24d9, s.List)
	return str
}

// TlogResponse_Promise is a wrapper for a TlogResponse promised by a client call.
type TlogResponse_Promise struct{ *capnp.Pipeline }

func (p TlogResponse_Promise) Struct() (TlogResponse, error) {
	s, err := p.Pipeline.Struct()
	return TlogResponse{s}, err
}

const schema_f4533cbae6e08506 = "x\xda\x8c\x93_\x88\x1bU\x18\xc5\xcf\xb9w&\xbb\x85" +
	"\xdd\xcd\x0e\x89\xd0\x16e\x05\xfbP\x8b\xd5\xb6\xebS)" +
	"\xb4\x1bk\xa9\x0bJoV\x10\x16A\xc7\xc9m2n" +
	"2\x93\xcd\x9d\xec\x1f\xffP-\xf6\xc1\"\x88\xd0J-" +
	"\x0a\xddR\xa1B\x0b\x0a\xad\x88\xf8PA\xb0>\x16\xaa" +
	"\xe0\x8b\xac\xa0\x15_\x04A|\xb2\x8e\xdc\xc9&Y\xd3" +
	"\xc5\xfa\x96\xfb\xe5\xcc\xbd\xdf\xef|\xdf\xd9u\xaf8 " +
	"v\xbb\x8b\x12P\xdb\xdd\\\xba\xfb\xe6\xf1}?,\xfd" +
	"\xfe\x16\xd4\x16:i\xee\xc4\xea\xad\xcf\xf7\xcd\xfc\x01W" +
	"\x0c\x01\x93+\xdc\xca\xc2'\xb4?/\xf3\x19\x82\xe9\xf7" +
	"\xdbN~\xfd\xe3\xd6\x1bg\xac\x9c\xeb\xe4\x99\xc6\x95{" +
	"X\xb8G\x0e\x01\x05O.\x82\xe9\xf9\x1b\x7f\xde~\xe0" +
	"\xe5\x03\xd7\xadZ\xf4\xd5\x8fs\xc8\x01&_\x97\xb3," +
	"\x9c\xce\xe4\xef\xc8_\xc0\xf4\xda\xf4\xf9\xb7\xbf\xbbus" +
	"u@\xde\xb9\xbc\xed\x94Yx\xd3\xb1\xea\x13\x8eU\x9f" +
	"Z\xdd\xf2\xe9\x95\xab/\xfe4\xa8\xb6\x92I\xedN\xb3" +
	"\xb0\xecf\x1f\xbaY\xe7SG\xbfy\xf7\xd5\xb3\xa7\x7f" +
	"\x1b\xe8<S\x7f\x9b\x9be\xe1\xd7\x9c\xbd\xfb\xe7\xdc\"" +
	"v\xa6&\xa8\xe9\x86\xffH\"\xebq\xf5\xb9\xce\xe1\xe1" +
	"\xc0oF\xcd\xbdO\xd7\xe3j\xa9\x1e\xcb`\xee\x08\xa9" +
	"6K\x07p\x08x\xefM\x03\xea\x8c\xa4\xba \xe8\x91" +
	"E\xda\xe2\xca\x1e@\xbd/\xa9.\x0aR\x14)\x00\xef" +
	"\xc3\x1d\x80:'\xa9.\x09z\x92EJ\xc0\xfb\xc8\x16" +
	"/H\xaa\x8f\x05=G\x14\xe9\x00\xde\xe52\xa0.I" +
	"\xaa\xcf\x04=ws\x91.\xe0]\xb5\xc5+\x92\xea\x9a" +
	"`j\xf4|[G\x81\x06\xc0M\x10\xdc\x04N\x84Q" +
	"E/\xd1\x85\xa0\x0b\xe6k\xbe\xa9q\x14\x82\xa3`\xbe" +
	"\xe2'~\xf7\x90&aC\x9b\xc4o\x80\xcd\xae:\x8d" +
	"\x9b\xba\xe5'a\x0cF\xccA0\x07\xde\xc5\x8a\xb26" +
	"\x13\xcd82\xda\xba1\xdcs\xe3\xc1\xbd\x80\xda&\xa9" +
	"v\x09v\xcd\xd8i;\x7fHR\x1d\x16\xdco\x12?" +
	"i\x1b\x0a\x08\x0a\xac\x03\xa1\xe1\x18xD2\xe3\x19[" +
	"\xf7\xbe\xb3\xe1\xfb\x8f\xd5C\x1d%Ojc|Y\xcd" +
	"\x9a\x18\x97\xceH\x9af]\xf8\xd6\xfeg%UM\xf0" +
	">\xfe\x9d\xae5\xa2\x8f\x03\xaa\"\xa9\x9a\x82\xa3\xe2v" +
	"\xda\x99K\xe3$\xa0\x9a\x92\xea\x15\xc1Q\xf9W\xda\x19" +
	"\xcc\xf2,\xa0\x96$\xd5\x1b\x82\x13/\xd4\xe3`\x8e\xe3" +
	"\xfd\xcc\x80\x1c\x07\xd3\xa3q+\xd0\x87\xeam\x9a\xdaT" +
	"2\xa3\xe7{\xc3H\x17\xfd0y\xaatp\x86u\x7f" +
	"A\xcf,G\x01\x86\xd2Jh\x828\x8a4d\x90 " +
	"\xf7\x1f|\x87\xfd\xa8bj\xfe\x9c.[w\x0c\x935" +
	"\xbc5\x8f\xfdR\x9f\xae\xeb\xb1\xb6\xb5\xe7%U]\xd0" +
	"\x13\xec\x90\x85-@\xd5$Ub7\xee\xfe\x0e\xd8\xfc" +
	"Y@%\x92\xea5\xc1c\x0b\xbae\xc28\xe20\x04" +
	"\x87\xc1c\x0b\x95\xd0\xcc=q\x90#\x10\x1c\xb1\x80a" +
	"\xcbd`\x13\xd9\x94zx-mtr(l1\xfb" +
	"\xb7\xad#\x19h\x12\x82\xbc\xeb\xe0\xa6\xaa\xd5\x96\xae\xda" +
	"e\x8b\x80\x81(\xd90\x9c\x92T\xe7\xfa`\x1f\xecX" +
	"\x17\xaf.\xd8Jy\xa3(\x956\x8a\x92\xdd\xc7\x8b\x92" +
	"\xea+\x1b%\xd9\x89\xd2\x97\xf6\xce/$\xd5u\xc1|" +
	"\xe47t\x977o\xc2\x97\xfa\x90\x1b\x04e\xd0\xa0\xfd" +
	"\xd9f\xf4V\xf7\xdf\x1b2\x06\xe6\x9b-\xbd\xd0K\xde" +
	"\xff\x9a\xb8i\xc6\x91\xbc#V\xa5~\xac<:k\xb9" +
	"\xb2l\xdb%\xd5\xa3wNr g\xff\x04\x00\x00\xff" +
	"\xff0\x1ft$"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x8cf178de3c82d431,
		0x98d11ae1c78a24d9,
		0xc8407b23fdf6d1a2,
		0xe0d4e6d68fa24ac0,
		0xe46ab5b4b619e094,
		0xee959a7d96c96641)
}
