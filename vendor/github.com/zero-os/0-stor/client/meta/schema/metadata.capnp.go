// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Metadata struct{ capnp.Struct }

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0x84eb980ee3c7d21d

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return Metadata{st}, err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return Metadata{st}, err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.RootPtr()
	return Metadata{root.Struct()}, err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0x84eb980ee3c7d21d, s.Struct)
	return str
}

func (s Metadata) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s Metadata) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Metadata) Epoch() uint64 {
	return s.Struct.Uint64(8)
}

func (s Metadata) SetEpoch(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Metadata) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Metadata) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Metadata) EncrKey() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Metadata) HasEncrKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Metadata) SetEncrKey(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Metadata) Shard() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Metadata) HasShard() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Metadata) SetShard(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewShard sets the shard field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Metadata) NewShard(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Metadata) Previous() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Metadata) HasPrevious() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Metadata) SetPrevious(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Metadata) Next() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Metadata) HasNext() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Metadata) SetNext(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Metadata) ConfigPtr() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Metadata) HasConfigPtr() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Metadata) SetConfigPtr(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s Metadata) NumOfChunks() uint64 {
	return s.Struct.Uint64(16)
}

func (s Metadata) SetNumOfChunks(v uint64) {
	s.Struct.SetUint64(16, v)
}

// Metadata_List is a list of Metadata.
type Metadata_List struct{ capnp.List }

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6}, sz)
	return Metadata_List{l}, err
}

func (s Metadata_List) At(i int) Metadata { return Metadata{s.List.Struct(i)} }

func (s Metadata_List) Set(i int, v Metadata) error { return s.List.SetStruct(i, v.Struct) }

// Metadata_Promise is a wrapper for a Metadata promised by a client call.
type Metadata_Promise struct{ *capnp.Pipeline }

func (p Metadata_Promise) Struct() (Metadata, error) {
	s, err := p.Pipeline.Struct()
	return Metadata{s}, err
}

const schema_f4533cbae6e08506 = "x\xdaD\xcd\xcd\xca\xd3@\x14\xc6\xf1\xe7\x99\xc9\xc7\xfb" +
	"\x82o\xdb!\x83 \xb4T\xa4\x82\x14\xfc\xa8K\x11\x14" +
	"\xdd)b\xa7\xb9\x82\x98NM)MC\x92\x8a\xbaq" +
	"\xa3\xf7\xe0\xb5\xb8q%\xaeD\xf4\x0a\x04A\x04\x15\x14" +
	"*TQ\"\x83Dw\xe7\xff\xe3\x1cN\xef\xf5U1" +
	"\xf1\x9f\x130\xda\x0f\x9a\xc1\xdb\x97\xef;O?=\x86" +
	"9N\xd9\x04O\xde}xv9\xde\xc1\x0fB@\xbd" +
	"\xf8\xa9\xde\x84\xc0\xe4UC\x9cm\xaa4\xb3\xeb\xe4\xfc" +
	"Z\xd8:\x99'ur.M\x8a\xbc\xb8t\xcb^\xf9" +
	"\xdbS\xd2\x8c\xa4\x07x\x04\xd4\x971`>J\x9a\x9d" +
	"\xa0\"5\x1d~\xbb\x08\x98\xcf\x92f/H\xa1)\x00" +
	"\xf5\xfd\x14`\xbeJ\x9a_\x82JRS\x02\xea\xc75" +
	"\xc0\xec$g\x14T\x9e\xd0\xf4\x00\xf5\xdb]\xef%c" +
	"\xed\xd4\x97\x9a>\x10)\xde\x00\xe2\x1e%\xe3\xbe\xf3\xc0" +
	"\xd3\x0c\x80\xe8\x04\xc7@\xac\x9d\x9ft\x1e\xfa\x9a!\x10" +
	"\x0d8\x03\xe2\xbe\xf33\xce\x0f\x84\xe6\x01\x10\x9d\xe6\x1d" +
	" \x1e9\xbf@\xc1n\xb5|hy\x08\xc1Cph" +
	"\x8bM\x9a\xb5\x15\xae\xec\x03\x1eA\xf0\x08|d\xf3\xb4" +
	"\xbc\xf9\xbf\x87U\x96\x94sv\xc0\xa9$\x8fA\xb8\xb1" +
	")J{o\xb9\xd9V\x00\xda\xc5nn\xef\xd7m4" +
	"\xe9&_,\xefNk\xb0\xfcg\xf9v}{q=" +
	"\xdb\"\xccWU\xfb\xfbO\x00\x00\x00\xff\xff\xdc\xc6U" +
	"k"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x84eb980ee3c7d21d)
}
